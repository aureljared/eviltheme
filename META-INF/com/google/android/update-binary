#!/sbin/sh
# Eviltheme by Jared Dantis (@aureljared)
# Licensed under GPL v3
# https://github.com/aureljared/eviltheme
vrVersion="3.0.0-beta2"
vrRoot="/data/tmp/eviltheme"                      # Extracted theme files location
vrBackupStaging="/data/tmp/eviltheme-backup"      # Backup files location
vrBackup="/data/eviltheme-backup"                 # Restore ZIP location
vrEngine="/tmp/eviltheme"                         # Engine files location

TIMESTAMP=$(date +"%m%d%y-%H%M%S")
ROOT=
ART=0
SYSTEMLESS=0
ZIPFILE="$3"

# Extract engine files
rm -rf $vrRoot $vrBackupStaging $vrEngine && mkdir $vrEngine
unzip -o "$ZIPFILE" "META-INF/tk/aureljared/*" "eviltheme.prop" -d $vrEngine
find "$vrEngine/META-INF/tk/aureljared/eviltheme" -type f -exec mv {} "$vrEngine/" \;
chmod -R 0755 $vrEngine/*
. $vrEngine/recovery-utils.sh
. $vrEngine/eviltheme-utils.sh
. $vrEngine/eviltheme.prop

# Please don't remove this, thanks!
themeIntro
ui_print "--------------------------------"
ui_print " Eviltheme $vrVersion by @aureljared"
ui_print "--------------------------------"

# Mount filesystems
ui_print "Mounting filesystems"
mount -o ro /system
mount /data
mount /preload
set_progress 0.10

# Extract theme files
ui_print "Extracting theme files"
unzip -o "$ZIPFILE" "vrtheme/*" -d /data/tmp
mv /data/tmp/vrtheme $vrRoot
mv $vrEngine/restore_template.zip $vrRoot/
mkdir -p "$vrRoot/apply"
mkdir -p "$vrBackupStaging" && cp -f $vrEngine/eviltheme.prop $vrBackupStaging/
set_progress 0.30

# Detect runtime
echo -n '' > $vrBackupStaging/bytecode.list
test -f /system/system/build.prop && ROOT="/system"
platformString=`cat $ROOT/system/build.prop | grep "^ro.build.version.release=" | cut -d"=" -f2 | tr -d '\r '`
platform=`echo "$platformString" | cut -d. -f1`
if [ "$platform" -ge "5" ]; then
    ART=1
    ui_print "Detected ART runtime"
else
    ui_print "Detected Dalvik runtime"
    mount /cache
fi

# Systemless installation detection
suimg=$(ls /data/magisk.img || ls /cache/magisk.img) 2>/dev/null
if [ ! -e "/sdcard/.eviltheme-force-system" ] && [ "$suimg" ]; then
    MAGISKBIN="$(echo $suimg | sed 's~.img~~g')"
    ui_print "Attempting systemless mode"

    # Check for Magisk 13.1+
    ui_print "Analyzing Magisk installation"
    [ -d "$MAGISKBIN" -a -f "$MAGISKBIN/magisk" -a -f "$MAGISKBIN/util_functions.sh" ] && oldMagisk=0 || oldMagisk=1
    if [ "$oldMagisk" -eq "0" ]; then
        SYSTEMLESS=1
        sumnt="/$(basename $suimg .img)"
        
        # Calculate free space
        curBlocks=$(e2fsck -n $suimg 2>/dev/null | grep $suimg | cut -d, -f3 | cut -d\  -f2)
        curUsed=$(echo "$curBlocks" | cut -d/ -f1)
        curSize=$(echo "$curBlocks" | cut -d/ -f2)
        curFreeM=$(((curSize - curUsed) * 4 / 1024))
        curUsedM=$((curUsed * 4 / 1024))
        curSizeM=$((curSize * 4 / 1024))
        ui_print " * Free space: $curFreeM of $curSizeM MB"

        # Calculate size of themed apps
        needAppSizeK=0
        find $vrRoot/system -name '*.apk' 2>/dev/null | while read f; do
            if [ "$ART" -eq "1" ]; then
                apkFile=$(echo $f | grep -o '[^/]*$')
                newRoot="${root}system"
                apkPath="$(echo $f | sed "s~${vrRoot}~~g" | sed "s~/system~${newRoot}~g" | sed 's/.apk//g')/$apkFile"
            else
                apkPath=$(echo $f | sed "s~${vrRoot}~~g" | sed "s~/system~${root}system~g")
            fi
            sizeK=$(du -sk $apkPath | cut -f1)
            needAppSizeK=$((sizeK + needAppSizeK))
        done
        [ "$needAppSizeK" -gt "0" ] && needAppSizeM=$((needAppSizeK / 1024)) || needAppSizeM=0
        ui_print " * Theme size: $needAppSizeM MB"

        # Calculate size of new files
        needNewSize=$(unzip -l $ZIPFILE 'system/*' | tr -s ' ' ' ' | tail -1 | cut -d' ' -f2)
        needNewSizeK=$((needNewSize / 1024))
        [ "$needNewSize" -gt "0" ] && needNewSizeM=$((needNewSizeK / 1024)) || needNewSizeM=0
        ui_print " * New files: $needNewSizeM MB"

        # Calculate total theme size
        needSizeM=$(((needAppSizeK + needNewSizeK) / 1024))
        if [ "$needSizeM" -lt "$curFreeM" ]; then
            ui_print " * Free space enough, not resizing."
        else
            newSizeM=$(((needSizeM + curUsedM) + 32))   # 32MB extra
            dataFreeBlocks=$(df -kP /data | tr -s ' ' $'\t' | cut -f4 | grep -vE "^Available")
            dataFreeM=$((dataFreeBlocks / 1024))
            if [ "$dataFreeM" -gt "$newSizeM" ]; then
                ui_print " * Resizing to $needSizeM MB"
                resize2fs $suimg ${needSizeM}M
            else
                ui_print " * Error: /data has too little free space."
                ui_print "   To force a non-systemless installation,"
                ui_print "   create a file called .eviltheme-force-system"
                ui_print "   in your /sdcard."
                cleanup
                exit 1
            fi
        fi

        # Mount image
        ui_print "Mounting magisk.img"
        test ! -e $sumnt && mkdir $sumnt
        mount -t ext4 -o rw,noatime $suimg $sumnt
        for i in 0 1 2 3 4 5 6 7; do
            case `mount` in
                *" $sumnt "*) break;;
            esac;
            loop=/dev/block/loop$i
            if [ ! -f "$loop" -o ! -b "$loop" ]; then
                mknod $loop b 7 $i
            fi
            losetup $loop $suimg && mount -t ext4 -o loop $loop $sumnt
        done

        # Generate module.prop for Magisk
        ui_print "Creating Magisk module $themeId"
        targetParent="$sumnt/$themeId"
        target="$targetParent/system"
        mkdir -p $target
        $vrEngine/magisk-setup.sh $vrEngine/eviltheme.prop $targetParent
        echo -e "\nthemeSize=$needSizeM\n" >> $vrBackupStaging/eviltheme.prop
    else
        ui_print " * Error: Old Magisk version detected."
        ui_print "   Please update to Magisk 13.1+, or"
        ui_print "   force a non-systemless installation by"
        ui_print "   creating a file called .eviltheme-force-system"
        ui_print "   in your /sdcard."
        cleanup
        exit 1
    fi
else
    ui_print "Installing in system mode"
    mount -o rw,remount /system
    mount /system
    target="$ROOT/system"
fi
set_progress 0.40

# Remove specified files, if any
if [ -e "$vrRoot/delete.list" ]; then
    ui_print "Removing files"
    while IFS='' read item; do
        if [ -e "$item" ]; then
            ui_print " => $item"
            filePath="$(dirname $item)"
            fileRoot="$(echo $filePath | cut -f2 -d/)"
            if [ "$SYSTEMLESS" -eq "1" ] && [ "$fileRoot" == "system" ]; then
                # Replace file with empty folder
                # so Magisk can overwrite it by mounting
                filePath="$target/$(echo $filePath | sed 's~/system~~g')"
                mkdir -p "$filePath"
                touch "$filePath/.replace"
            else
                # Allow backup deferring
                deleteParam="$(echo $item | grep -oE '[^ ]+$')"
                if [ "$deleteParam" == "no-backup" ]; then
                    [ "$fileRoot" == "system" ] && rm -fr "$ROOT/$item" || rm -fr $item
                else
                    # Move file to backup path
                    backupPath="$vrBackupStaging/$filePath"
                    mkdir -p "$backupPath"
                    mv "$item" "$backupPath/"
                fi
            fi
        fi
    done < "$vrRoot/delete.list"
fi

# Extract new files
ui_print "Extracting new files"
echo -n '' > $vrBackupStaging/delete.list
unzip -o "$ZIPFILE" 'data/*' -d "/"
for f in $(list_new_datafiles $ZIPFILE); do echo "/$f" >> $vrBackupStaging/delete.list; done
if [ "$SYSTEMLESS" -eq "1" ]; then
    # No need to handle /system backups for systemless
    # as the module itself can simply be removed
    unzip -o "$ZIPFILE" 'system/*' -d "$targetParent"
else
    for f in $(list_new_sysfiles $ZIPFILE); do
        # Add file to delete.list in restore zip
        [ ! -z "$ROOT" ] && fileName="/$ROOT/$f" || fileName="/$f"
        echo "$fileName" >> $vrBackupStaging/delete.list

        # Check if file exists
        if [ -e "/$ROOT/$f" ]; then
            # File exists, copy existing file to backup folder
            fileDir="$vrBackupStaging/$(dirname /$ROOT/$f)"
            mkdir -p $fileDir
            cp -fp "/$ROOT/$f" "$fileDir/"
        fi
    done
    unzip -o "$ZIPFILE" 'system/*' -d "/$ROOT"
fi

# Start theming
if [ -d "$vrRoot/system" -o -d "$vrRoot/preload" ]; then
    ui_print "Applying theme"
    [ -z "$(ls -Z /init.rc 2>&1 | grep 'illegal')" ] && lsContextSupported=1
    [ -d "$vrRoot/system/app" ] && theme "system" "app"
    [ -d "$vrRoot/system/priv-app" ] && theme "system" "priv-app"
    [ -d "$vrRoot/preload/symlink/system/app" ] && theme "preload/symlink/system" "app"
    [ -d "$vrRoot/system/framework" ] && theme "system" "framework"
    [ -d "$vrRoot/system/framework/samsung-framework-res" ] && theme "system/framework" "samsung-framework-res"
    set_progress 0.80
fi

# Execute custom script
[ -f "$vrEngine/post-install.sh" ] && $vrEngine/post-install.sh "$vrEngine/recovery-utils.sh" "$2" "$ZIPFILE" "$target" "$vrBackupStaging"
set_progress 0.90

# Create flashable restore zip
if [ "$(ls -A $vrBackupStaging/)" ]; then
    ui_print "Creating restore ZIP"
    restoreZip="$vrBackup/$themeId-restore-$TIMESTAMP.zip"

    # Delete empty lists
    [ -z "$(cat $vrBackupStaging/bytecode.list)" ] && rm -f $vrBackupStaging/bytecode.list
    [ -z "$(cat $vrBackupStaging/delete.list)" ] && rm -f $vrBackupStaging/delete.list

    # Copy post uninstallation script
    [ -f "$vrEngine/post-uninstall.sh" ] && cp -f "$vrEngine/post-uninstall.sh" "$vrBackupStaging/"

    # Create zip
    mkdir -p $vrBackup && cd $vrBackupStaging
    $vrEngine/zip -r9 "$vrRoot/restore_template.zip" .
    mv "$vrRoot/restore_template.zip" "$restoreZip"
    set_progress 0.95
fi

# Cleanup
[ "$themeDebug" -eq "1" ] || cleanup
set_progress 1.00

# Goodbye
ui_print "Done."
ui_print ""
if [ "$SYSTEMLESS" -eq "0" ]; then
    ui_print "To uninstall, flash $restoreZip."
else
    ui_print "To uninstall, remove the \"$themeName\" module in Magisk Manager."
fi
ui_print ""
set_progress 1.34
exit 0
